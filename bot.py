from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.storage import FSMContext
from set_bot_commands import set_default_commands
from dotenv import load_dotenv
import os
from time import sleep
from keyboard import *


load_dotenv()
TOKEN = os.environ.get("TOKEN")

bot = Bot(token = TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

async def on_startup(dp):
    await set_default_commands(dp)


class States(StatesGroup):
    state1 = State()
    state2 = State()
    sklad = State()
    ofis_s = State()
    admin = State()
    vajn_infa = State()
    otdel_prodaj = State()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Çüëã\n–Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ—Å–≤–æ–µ–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏')
    sleep(2)
    await message.answer('–ê—Ö, –¥–∞... –ó–∞–±—ã–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è, —è - –±–æ—Ç –õ–µ—Ä–∞, –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º')
    sleep(2)
    await message.answer("–ß—Ç–æ–±—ã –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –æ–±—â–µ–Ω–∏–µ, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ\n–ü—Ä–æ—à—É, –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'")
    sleep(2)
    await message.answer('https://docs.google.com/forms/d/e/1FAIpQLSeuziM3rTD0Cwj2o_YkD5Vq67AbwE65Z80ZvV2evciSvCBsrw/viewform', reply_markup=keyboard1())

@dp.message_handler(commands=['menu'])
async def menu(message:types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é: ', reply_markup=keyboard3())
    await States.state2.set()

@dp.callback_query_handler(lambda c: c.data == 'finish')
async def process_after_finish(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, text = '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã —è —Å–º–æ–≥ –ø–æ–º–æ—á—å –≤–∞–º!')

@dp.message_handler(content_types=['text'])
async def message(message:types.Message):
    if message.text == '11111':
        await message.answer('–û—Ç–∫—Ä—ã–≤–∞—é –¥–æ—Å—Ç—É–ø...')
        await message.answer('–ù–∞ –∫–∞–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤—ã –≤—Å—Ç—É–ø–∞–µ—Ç–µ:', reply_markup = keyboard2())
        await States.state1.set()
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')

@dp.message_handler(state = States.state1)
async def state1(message: types.Message):
    await message.answer('–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é', reply_markup=keyboard3())
    await States.state2.set()

@dp.message_handler(state = States.state2)
async def state2(message: types.Message, state: FSMContext):
    if message.text == '–°–∫–ª–∞–¥':
        await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç –°–∫–ª–∞–¥, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ –º–µ–Ω—é', reply_markup=keyboard_sklad())
        await States.sklad.set()
    elif message.text == '–û—Ñ–∏—Å-—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞':
        await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç –û—Ñ–∏—Å-—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ –º–µ–Ω—é', reply_markup=keyboard_ofis())
        await States.ofis_s.set()
    elif message.text == '–ê–¥–º–∏–Ω–∏—Å—Ç–∞—Ä—Ü–∏—è':
        await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç –ê–¥–º–∏–Ω–∏—Å—Ç–∞—Ä—Ü–∏—è, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ –º–µ–Ω—é', reply_markup=keyboard_admin())
        await States.admin.set()
    elif message.text == '–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        #await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ –º–µ–Ω—é', reply_markup=keyboard_vajn_infa())
        await message.answer('https://docs.google.com/document/d/1AZsS7gbPooiElsF_kThMiNM27EcTvp50to4YcOKXWuY/edit')
        #await States.vajn_infa.set()
        await state.reset_state()
    elif message.text == '–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂':
        await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç –û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ –º–µ–Ω—é', reply_markup=keyboard_op())
        await States.otdel_prodaj.set()

@dp.message_handler(state = States.sklad)
async def state_sklad(message: types.Message, state: FSMContext):
    if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:', reply_markup=keyboard3())
        await States.state2.set()
        return True
    if message.text == '–î–æ–ª–∂–Ω–æ—Å—Ç–∏':
        await message.answer('https://docs.google.com/document/d/12PPNiRoFa0R6I5o91Felo9esoT522fvm8BIBgGqr6ek/edit')
    await state.reset_state()

@dp.message_handler(state = States.ofis_s)
async def state_sklad(message: types.Message, state: FSMContext):
    if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:', reply_markup=keyboard3())
        await States.state2.set()
        return True
    if message.text == '–î–æ–ª–∂–Ω–æ—Å—Ç–∏':
        await message.answer('https://docs.google.com/document/d/12PPNiRoFa0R6I5o91Felo9esoT522fvm8BIBgGqr6e')
    await state.reset_state()

@dp.message_handler(state = States.admin)
async def state_sklad(message: types.Message, state: FSMContext):
    if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:', reply_markup=keyboard3())
        await States.state2.set()
        return True
    await message.answer('–ü–æ–∫–∞ –ø—É—Å—Ç–æ')
    await state.reset_state()

@dp.message_handler(state = States.otdel_prodaj)
async def state_sklad(message: types.Message, state: FSMContext):
    if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:', reply_markup=keyboard3())
        await States.state2.set()
        return True
    await message.answer('–ü–æ–∫–∞ –ø—É—Å—Ç–æ')
    await state.reset_state()

@dp.message_handler(state = States.vajn_infa)
async def state_vajn_infa(message: types.Message, state: FSMContext):
    if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:', reply_markup=keyboard3())
        await States.state2.set()
        return True
    await message.answer('https://docs.google.com/document/d/1zdNjI7w92XhQyV1QZNbTMSxZaEV_dLz_kq8YTBPZWx8/edit')
    await message.answer('https://docs.google.com/document/d/1AZsS7gbPooiElsF_kThMiNM27EcTvp50to4YcOKXWuY/edit')
    await state.reset_state()
executor.start_polling(dp, on_startup=on_startup)
